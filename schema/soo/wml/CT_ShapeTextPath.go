// Copyright 2017 Baliance. All rights reserved.
//
// DO NOT EDIT: generated by gooxml ECMA-376 generator
//
// Use of this source code is governed by the terms of the Affero GNU General
// Public License version 3.0 as published by the Free Software Foundation and
// appearing in the file LICENSE included in the packaging of this file. A
// commercial license can be purchased by contacting sales@baliance.com.

package wml

import (
	"encoding/xml"
	"fmt"
)

type CT_ShapTextPath struct {
	OnAttr       *string
	FitshapeAttr *string
	FitpathAttr  *string
	TrimAttr     *string
	XscaleAttr   *string
	StringAttr   *string
	StyleAttr    *string
}

func NewCT_ShapTextPath() *CT_ShapTextPath {
	return &CT_ShapTextPath{}
}

func (m *CT_ShapTextPath) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	// 属性编码 -  文本
	if m.OnAttr != nil {
		start.Attr = append(start.Attr, xml.Attr{Name: xml.Name{Local: "on"},
			Value: fmt.Sprintf("%v", *m.OnAttr)})
	}
	if m.FitshapeAttr != nil {
		start.Attr = append(start.Attr, xml.Attr{Name: xml.Name{Local: "fitshape"},
			Value: fmt.Sprintf("%v", *m.FitshapeAttr)})
	}
	if m.FitpathAttr != nil {
		start.Attr = append(start.Attr, xml.Attr{Name: xml.Name{Local: "fitpath"},
			Value: fmt.Sprintf("%v", *m.FitpathAttr)})
	}
	if m.TrimAttr != nil {
		start.Attr = append(start.Attr, xml.Attr{Name: xml.Name{Local: "trim"},
			Value: fmt.Sprintf("%v", *m.TrimAttr)})
	}
	if m.XscaleAttr != nil {
		start.Attr = append(start.Attr, xml.Attr{Name: xml.Name{Local: "xscale"},
			Value: fmt.Sprintf("%v", *m.XscaleAttr)})
	}
	if m.StringAttr != nil {
		start.Attr = append(start.Attr, xml.Attr{Name: xml.Name{Local: "string"},
			Value: fmt.Sprintf("%v", *m.StringAttr)})
	}
	if m.StyleAttr != nil {
		start.Attr = append(start.Attr, xml.Attr{Name: xml.Name{Local: "style"},
			Value: fmt.Sprintf("%v", *m.StyleAttr)})
	}

	e.EncodeToken(start)

	// 编码元素结构
	e.EncodeToken(xml.EndElement{Name: start.Name})
	return nil
}

func (m *CT_ShapTextPath) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {

	// initialize to default
	for _, attr := range start.Attr {
		if attr.Name.Local == "on" {
			parsed, err := attr.Value, error(nil)
			if err != nil {
				return err
			}
			m.OnAttr = &parsed
			continue
		}
		if attr.Name.Local == "fitshape" {
			parsed, err := attr.Value, error(nil)
			if err != nil {
				return err
			}
			m.FitshapeAttr = &parsed
			continue
		}
		if attr.Name.Local == "fitpath" {
			parsed, err := attr.Value, error(nil)
			if err != nil {
				return err
			}
			m.FitpathAttr = &parsed
			continue
		}
		if attr.Name.Local == "trim" {
			parsed, err := attr.Value, error(nil)
			if err != nil {
				return err
			}
			m.TrimAttr = &parsed
			continue
		}
		if attr.Name.Local == "xscale" {
			parsed, err := attr.Value, error(nil)
			if err != nil {
				return err
			}
			m.XscaleAttr = &parsed
			continue
		}

		if attr.Name.Local == "string" {
			parsed, err := attr.Value, error(nil)
			if err != nil {
				return err
			}
			m.StringAttr = &parsed
			continue
		}

		if attr.Name.Local == "style" {
			parsed, err := attr.Value, error(nil)
			if err != nil {
				return err
			}
			m.StyleAttr = &parsed
			continue
		}

	}
	for {
		tok, err := d.Token()
		if err != nil {
			return fmt.Errorf("parsing CT_ShapTextPath: %s", err)
		}
		if el, ok := tok.(xml.EndElement); ok && el.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_ShapTextPath and its children
func (m *CT_ShapTextPath) Validate() error {
	return m.ValidateWithPath("CT_ShapTextPath")
}

// ValidateWithPath validates the CT_ShapTextPath and its children, prefixing error messages with path
func (m *CT_ShapTextPath) ValidateWithPath(path string) error {

	return nil
}
